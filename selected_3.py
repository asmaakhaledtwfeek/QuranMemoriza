# -*- coding: utf-8 -*-
"""Selected_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h4YenTLf8q2pRPzL45-Ms-aFNeIe31Ak
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ARBML/klaam
# %cd klaam

!pip install -r requirements.txt

!pip install pyquran

import nltk
nltk.download('punkt')
from nltk import word_tokenize
import numpy
from klaam.utils.audio import get_audio
from klaam import SpeechRecognition
import pyquran as q

from klaam import SpeechRecognition
 model = SpeechRecognition()

suras_names = [None, 'الفاتحة', 'البقرة', 'آل عمران', 'النساء', 'المائدة', 'الأنعام', 'الأعراف', 'الأنفال',
               'التوبة',
               'يونس', 'هود',
               'يوسف', 'الرعد', 'ابراهيم', 'الحجر', 'النحل', 'الإسراء', 'الكهف', 'مريم', 'طه', 'الأنبياء',
               'الحج',
               'المؤمنون',
               'النور', 'الفرقان', 'الشعراء', 'النمل', 'القصص', 'العنكبوت', 'الروم', 'لقمان', 'السجدة',
               'الأحزاب',
               'سبإ',
               'فاطر', 'يس', 'الصافات', 'ص', 'الزمر', 'غافر', 'فصلت', 'الشورى', 'الزخرف', 'الدخان',
               'الجاثية',
               'الأحقاف',
               'محمد', 'الفتح', 'الحجرات', 'ق', 'الذاريات', 'الطور', 'النجم', 'القمر', 'الرحمن', 'الواقعة',
               'الحديد',
               'المجادلة', 'الحشر', 'الممتحنة', 'الصف', 'الجمعة', 'المنافقون', 'التغابن', 'الطلاق',
               'التحريم',
               'الملك',
               'القلم', 'الحاقة', 'المعارج', 'نوح', 'الجن', 'المزمل', 'المدثر', 'القيامة', 'الانسان',
               'المرسلات',
               'النبإ',
               'النازعات', 'عبس', 'التكوير', 'الإنفطار', 'المطففين', 'الإنشقاق', 'البروج', 'الطارق',
               'الأعلى',
               'الغاشية',
               'الفجر', 'البلد', 'الشمس', 'الليل', 'الضحى', 'الشرح', 'التين', 'العلق', 'القدر', 'البينة',
               'الزلزلة',
               'العاديات', 'القارعة', 'التكاثر', 'العصر', 'الهمزة', 'الفيل', 'قريش', 'الماعون', 'الكوثر',
               'الكافرون', 'النصر',
               'المسد', 'الإخلاص', 'الفلق', 'الناس']

def get_sim(aya,recorded_aya):
  toknized_trg = word_tokenize(aya)
  toknized_src = word_tokenize(recorded_aya)
  print(toknized_trg)
  print(toknized_src)
  psrc = 0
  ptrg = 0
  itre = len(toknized_trg)
  trget = []
  while (psrc < itre and ptrg < itre):
    if (psrc == len(toknized_src)):
      trget.append("Missed")
      ptrg += 1
    elif(levenshteinDistanceDP(toknized_src[psrc] , toknized_trg[ptrg]) == 0):
      trget.append("Same")
      psrc += 1
      ptrg += 1
    else:
      diff = levenshteinDistanceDP(toknized_src[psrc] , toknized_trg[ptrg])
      if(len(toknized_trg[ptrg]) > len(toknized_src[psrc]) and diff <= len(toknized_trg[ptrg])/2):
        trget.append("Modefied")
        psrc += 1
        ptrg += 1
      elif(len(toknized_trg[ptrg]) <= len(toknized_src[psrc]) and diff <= len(toknized_src[psrc])/2): 
        trget.append("Modefied")
        psrc += 1
        ptrg += 1
      else:
        if(psrc != len(toknized_src)-1):
          diff = levenshteinDistanceDP(toknized_src[psrc+1] , toknized_trg[ptrg])
        if (diff != 0):
          trget.append("Missed")
          psrc += 1
          ptrg += 1
        else:
          trget.append("Same")
          psrc += 1
          ptrg += 1
          

  print()
  print(trget)

def levenshteinDistanceDP(token1, token2):
    distances = numpy.zeros((len(token1) + 1, len(token2) + 1))
    
    for t1 in range(len(token1) + 1):
        distances[t1][0] = t1
    
    for t2 in range(len(token2) + 1):
        distances[0][t2] = t2
        
    
    a = 0
    b = 0
    c = 0
    
    for t1 in range(1, len(token1) + 1):
        for t2 in range(1, len(token2) + 1):
            if (token1[t1-1] == token2[t2-1]):
                distances[t1][t2] = distances[t1 - 1][t2 - 1]
            else:
                a = distances[t1][t2 - 1]
                b = distances[t1 - 1][t2]
                c = distances[t1 - 1][t2 - 1]
                
                if (a <= b and a <= c):
                    distances[t1][t2] = a + 1
                elif (b <= a and b <= c):
                    distances[t1][t2] = b + 1
                else:
                    distances[t1][t2] = c + 1
    return distances[len(token1)][len(token2)]

def record_aya():
  input("Press enter to record ")
  get_audio()
  x = model.transcribe('demo.wav')
  print(x)
  return x

def record():
  recorded_aya = record_aya()
  while(True):
    if(len(word_tokenize(recorded_aya)) > len(word_tokenize(aya))):
      print("Record again")
      recorded_aya = record_aya()
    else:
      break
  return recorded_aya

get_sura_name = input("Enter sura name : ")
sura_number = suras_names.index(get_sura_name)
sura = q.quran.get_sura(sura_number, with_tashkeel=False, basmalah=False)
print()
for a in range(len(sura)):
  print(a+1 ,"-",  sura[a])

print()

get_aya = input("Choose aya number : ")

aya = q.quran.get_verse(sura_number,int(get_aya))
print(aya)


recorded_aya = record()
get_sim(aya,recorded_aya)

